#!/bin/bash

set -eux
cd /

# Setup the insecure defaults

REGION="regionOne"
PASSWORD="unset"
SERVICE_TOKEN="unset"
ENDPOINT="192.0.2.1"
ADMIN_EMAIL="admin@example.com"
HOST="root@192.0.2.1"
DEBUG=""

# Functions

register-endpoint()
{
    DESCRIPTION=$1
    NAME=$2
    TYPE=$3
    PUBLIC_URL=$4

    if [ "ec2" = "$TYPE" ]; then
        SUFFIX="/services/Cloud"
        ADMIN_SUFFIX="/services/Admin"
    elif [ "image" = "$TYPE" ]; then
        SUFFIX="/v1"
        ADMIN_SUFFIX="$SUFFIX"
    elif [ "baremetal" = "$TYPE" ]; then
        SUFFIX="/"
        ADMIN_SUFFIX="$SUFFIX"
    elif [ "orchestration" = "$TYPE" ]; then
        SUFFIX="/v1/%(tenant_id)s"
        ADMIN_SUFFIX="$SUFFIX"
    elif [ "identity" = "$TYPE" ]; then
        SUFFIX="/v2.0"
        ADMIN_SUFFIX="$SUFFIX"
    elif [ "network" = "$TYPE" ]; then
        SUFFIX="/"
        ADMIN_SUFFIX="$SUFFIX"
    elif [ "compute" = "$TYPE" ]; then
        SUFFIX="/v2/\$(tenant_id)s"
        ADMIN_SUFFIX="$SUFFIX"
    else
        echo "Unknown service type" >&2
        exit 1
    fi

    INTERNAL_URL="$PUBLIC_URL"
    ADMIN_URL="$INTERNAL_URL"

    ADMIN_ROLE=$(keystone role-list | awk '/ admin / {print $2}')
    if [ -z "$ADMIN_ROLE" ]; then
        echo "Could not find admin role" >&2
        exit 1
    fi

    SERVICE_TENANT=$(keystone $DEBUG tenant-list | awk '/ service / {print $2}')
    PASSWORD="unset"
    SVC_USER=$(keystone $DEBUG user-create --name=$NAME --pass=$PASSWORD --tenant-id $SERVICE_TENANT --email=nobody@example.com | awk ' / id / {print $4}')

    keystone user-role-add $DEBUG --tenant-id $SERVICE_TENANT --user-id $SVC_USER --role-id $ADMIN_ROLE

    SERVICE_ID=$(keystone $DEBUG service-create --name=$NAME --type=$TYPE --description="$DESCRIPTION" | awk '/ id / {print $4}')
    keystone endpoint-create $DEBUG --region "$REGION" --service-id $SERVICE_ID \
        --publicurl   "${PUBLIC_URL}/${SUFFIX}" \
        --adminurl    "${ADMIN_URL}/${ADMIN_SUFFIX}" \
        --internalurl "${INTERNAL_URL}/${SUFFIX}"

    echo "Service $TYPE created with password $PASSWORD"
}


# Setup an openSUSE package based seed cloud

## -------------------------------------------------------------------------------
## init-keystone -p unset unset 192.0.2.1 admin@example.com root@192.0.2.1
## -------------------------------------------------------------------------------

export SERVICE_ENDPOINT=http://$ENDPOINT:35357/v2.0
export SERVICE_TOKEN

keystone-manage pki_setup --keystone-user openstack-keystone --keystone-group openstack-keystone
if ! [ -e /etc/keystone/default_catalog.templates ]; then
  sed -e "s,%SERVICE_HOST%,$ENDPOINT," \
      -e "s,%S3_SERVICE_PORT%,8080," \
      < /etc/keystone/default_catalog.templates.sample \
      > /etc/keystone/default_catalog.templates
fi
crudini --set /etc/keystone/keystone.conf DEFAULT admin_token $SERVICE_TOKEN
rcopenstack-keystone restart

echo "Waiting for keystone to initialise..."
if ! keystone tenant-get admin; then
  keystone tenant-create --name=admin
fi
ADMIN_TENANT_ID=$(keystone tenant-get admin | awk '$2=="id" {print $4}')
SERVICE_TENANT_ID=$(keystone tenant-create --name=service | awk '$2=="id" {print $4}')

# Roles
ADMIN_ROLE_ID=$(keystone role-create --name=admin | awk '$2=="id" {print $4}')
MEMBER_ROLE_ID=$(keystone role-create --name=Member | awk '$2=="id" {print $4}')

# Users
ADMIN_USER_ID=$(keystone user-create --name=admin \
        --pass="$PASSWORD" \
        --email="$ADMIN_EMAIL" | awk '$2=="id" {print $4}')

# User Roles
keystone user-role-add --user-id $ADMIN_USER_ID --role-id $ADMIN_ROLE_ID --tenant-id $ADMIN_TENANT_ID

register-endpoint "Keystone Identity Service" keystone identity http://$ENDPOINT:5000 -a http://$ENDPOINT:35357

## -------------------------------------------------------------------------------
## setup-endpoints 192.0.2.1 --glance-password unset --heat-password unset --neutron-password unset --nova-password unset
## -------------------------------------------------------------------------------

CINDER_PASSWORD="unset"
HEAT_PASSWORD="unset"
GLANCE_PASSWORD="unset"
NEUTRON_PASSWORD="unset"
NOVA_PASSWORD="unset"

PASSWORD=$HEAT_PASSWORD register-endpoint "Heat Service" heat orchestration http://$HOST:8004
PASSWORD=$NEUTRON_PASSWORD register-endpoint "Neutron Service" neutron network http://$HOST:9696
PASSWORD=$GLANCE_PASSWORD register-endpoint "Glance Image Service" glance image http://$HOST:9292
register-endpoint $DEBUG "EC2 Compatibility Layer" ec2 ec2 http://$HOST:8773
PASSWORD=$NOVA_PASSWORD register-endpoint "Nova Compute Service" nova compute http://$HOST:8774

## -------------------------------------------------------------------------------

keystone role-create --name heat_stack_user

## -------------------------------------------------------------------------------
## use regular keystone authentication

cat - > ~/.seedrc <<EOF
export NOVA_VERSION=1.1
export OS_PASSWORD=unset
export OS_AUTH_URL=http://192.0.2.1:5000/v2.0
export OS_USERNAME=admin
export OS_TENANT_NAME=admin
export COMPUTE_API_VERSION=1.1
export OS_NO_CACHE=True
export OS_CLOUDNAME=seed
EOF

. ~/.seedrc

if [ ! -e ~/.ssh/id_rsa.pub ]; then
    ssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa
fi

for c in /etc/glance/glance-api.conf /etc/glance/glance-registry.conf \
    /etc/neutron/neutron.conf /etc/heat/heat.conf /etc/nova/nova.conf ; do
    crudini --set $c keystone_authtoken auth_host "192.0.2.1"
    crudini --set $c keystone_authtoken auth_port 35357
    crudini --set $c keystone_authtoken auth_protocol http
    crudini --set $c keystone_authtoken auth_uri $OS_AUTH_URL
    crudini --set $c keystone_authtoken admin_tenant_name service
    crudini --set $c keystone_authtoken admin_user $OS_USERNAME
    crudini --set $c keystone_authtoken admin_password $OS_PASSWORD
done

for c in /etc/glance/glance-api.conf /etc/glance/glance-registry.conf ; do
    crudini --set $c keystone_authtoken admin_user glance
done

crudini --set /etc/neutron/neutron.conf keystone_authtoken admin_user neutron
crudini --set /etc/heat/heat.conf keystone_authtoken admin_user heat
crudini --set /etc/nova/nova.conf keystone_authtoken admin_user nova

## -------------------------------------------------------------------------------
## setup rabbitmq
## -------------------------------------------------------------------------------

rcrabbitmq-server restart

## -------------------------------------------------------------------------------
## setup glance
## -------------------------------------------------------------------------------

for c in /etc/glance/glance-api.conf /etc/glance/glance-registry.conf; do
    crudini --set $c DEFAULT sql_connection 'sqlite:////var/lib/glance/glance.sqlite'
done

rcopenstack-glance-api restart
rcopenstack-glance-registry restart


## -------------------------------------------------------------------------------
## setup neutron
## -------------------------------------------------------------------------------

c=/etc/neutron/plugins/linuxbridge/linuxbridge_conf.ini

crudini --set $c vlans tenant_network_type 'vlan'
crudini --set $c vlans network_vlan_ranges 'ctlplane:1000:2000'
crudini --set $c linux_bridge physical_interface_mappings 'ctlplane:eth1'

rcopenstack-neutron restart

## -------------------------------------------------------------------------------
## setup heat
## -------------------------------------------------------------------------------

c=/etc/heat/heat.conf

crudini --set $c DEFAULT heat_metadata_server_url 'http://192.0.2.1:8000'
crudini --set $c DEFAULT heat_waitcondition_server_url 'http://192.0.2.1:8000/v1/waitcondition'
crudini --set $c DEFAULT heat_watch_server_url 'http://192.0.2.1:8003'
crudini --set $c DEFAULT auth_encryption_key 'unset'

crudini --set $c DEFAULT admin_tenant_name 'service'

crudini --set $c ec2authtoken auth_uri 'http://192.0.2.1:5000/v2.0'

rcopenstack-heat-api restart
rcopenstack-heat-api-cfn restart
rcopenstack-heat-engine restart


## -------------------------------------------------------------------------------
## setup nova
## -------------------------------------------------------------------------------

c=/etc/nova/nova.conf

crudini --set $c baremetal arch 'amd64'
crudini --set $c baremetal power_manager 'nova.virt.baremetal.virtual_power_driver.VirtualPowerManager'
crudini --set $c baremetal virtual_power_user 'stack'
crudini --set $c baremetal virtual_power_key '/opt/stack/boot-stack/virtual-power-key'
crudini --set $c baremetal virtual_power_ssh_host '192.168.122.1'
crudini --set $c baremetal virtual_power_type 'virsh'
crudini --set $c baremetal driver 'nova.virt.baremetal.pxe.PXE'
crudini --set $c baremetal instance_type_extra_specs  'cpu_arch:x86_64'
crudini --set $c baremetal sql_connection 'sqlite:////var/lib/nova/nova_bm.sqlite'

crudini --set $c DEFAULT metadata-proxy 'false'
crudini --set $c DEFAULT service-password 'unset'
crudini --set $c DEFAULT compute_driver 'baremetal.driver.BareMetalDriver'
crudini --set $c DEFAULT my_ip '192.0.2.1'
crudini --set $c DEFAULT firewall_driver 'nova.virt.firewall.NoopFirewallDriver'
crudini --set $c DEFAULT scheduler_host_manager 'nova.scheduler.baremetal_host_manager.BaremetalHostManager'

# baremetal driver is used
su openstack-nova -s /bin/sh -c "nova-baremetal-manage db sync"

rcopenstack-nova-api restart
rcopenstack-nova-compute restart

for i in $(seq 1 10); do
    sleep 1
    nova list &> /dev/null && break
done

nova keypair-add --pub-key ~/.ssh/id_rsa.pub default

# While we can't mix hypervisors, having non-baremetal flavors will just
# confuse things.
nova flavor-delete m1.tiny || true
nova flavor-delete m1.small || true
nova flavor-delete m1.medium || true
nova flavor-delete m1.large || true
nova flavor-delete m1.xlarge || true

nova flavor-delete baremetal || true

MEM=2048
DISK=20
CPU=1
ARCH='amd64'

nova flavor-create baremetal auto $MEM $DISK $CPU
nova flavor-key baremetal set "cpu_arch"="$ARCH" \
    "baremetal:deploy_kernel_id"="$deploy_kernel_id"
    "baremetal:deploy_ramdisk_id"="$deploy_ramdisk_id"

## -------------------------------------------------------------------------------
## setup-neutron 192.0.2.2 192.0.2.3 192.0.2.0/24 192.0.2.1 ctlplane
## -------------------------------------------------------------------------------

# Start of DHCP range
ALLOCATION_START="192.0.2.2"
# End of DHCP range
ALLOCATION_END="192.0.2.3"
# Network CIDR
NETWORK_CIDR="192.0.2.0/24"
# Where to route traffic
NETWORK_GATEWAY="192.0.2.1"
# If non-empty create a provider flat network with this name otherwise create a
# virtual network and setup a router etc.
PHYSICAL_NETWORK="ctlplane"
# Start of floating range
FLOATING_START=""
# End of floating range
FLOATING_END=""
# Floating CIDR
FLOATING_CIDR=""

ALLOCATION_POOL="start=${ALLOCATION_START},end=${ALLOCATION_END}"

TENANT_ID=$(keystone tenant-list | grep ' admin ' | awk '{print $2}')

if [ -n "$PHYSICAL_NETWORK" ] ; then
    # Underclouds
    NET_NAME=$PHYSICAL_NETWORK
    NET_EXTRA="--tenant_id $TENANT_ID --provider:network_type flat --provider:physical_network $PHYSICAL_NETWORK"
    SUBNET_EXTRA="--tenant_id $TENANT_ID"
else
    # Overclouds
    NET_NAME="default-net"
    NET_EXTRA="--shared"
    SUBNET_EXTRA=""
fi

NET_ID=$(neutron net-create $NET_NAME $NET_EXTRA | grep ' id ' | awk '{print $4}')
SUBNET_ID=$(neutron subnet-create $SUBNET_EXTRA --ip_version 4 ${ALLOCATION_POOL:+--allocation-pool $ALLOCATION_POOL} ${NETWORK_GATEWAY:+--gateway $NETWORK_GATEWAY} $NET_ID $NETWORK_CIDR | grep ' id ' | awk '{print $4}')

if [ -z "$PHYSICAL_NETWORK" ] ; then
    neutron router-create default-router
    neutron router-interface-add default-router $SUBNET_ID
fi

if [ -n "$FLOATING_START" -a -n "$FLOATING_END" -a -n "$FLOATING_CIDR" ] ; then
    neutron net-create ext-net --router:external=True
    SUBNET_ID=$(neutron subnet-create ext-net $FLOATING_CIDR --disable-dhcp \
                --allocation-pool start=$FLOATING_START,end=$FLOATING_END)
    neutron router-gateway-set default-router ext-net
fi


